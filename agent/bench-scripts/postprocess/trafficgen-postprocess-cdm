#!/usr/bin/perl

use strict;
use warnings;
use File::Basename;
my $pbench_run_path;
my $pbench_lib_path;
BEGIN {
	$pbench_lib_path = `getconf.py pbench_install_dir pbench-agent`;
	chomp $pbench_lib_path;
	$pbench_lib_path .= "/lib";
}
use lib "$pbench_lib_path";
use JSON;
use Data::Dumper;
use PbenchCDM qw(create_metric_sample_doc create_bench_iter_sample_period_doc);
use PbenchBase qw(get_json_file put_json_file remove_element);

printf "\@ARGV: %s\n", join(" ", @ARGV);

my $script_name = basename($0);
my $rundir = shift(@ARGV);
my $base_bench_dir = shift(@ARGV);

my @trial_metrics = (
    { 'key' => 'result',
      'class' => 'pass/fail',
      'type' => 'trial-result',
      'name_format' => '' }

    );

my @trial_stats_metrics = (
    { 'key' => 'global',
      'field' => 'runtime',
      'class' => 'count',
      'type' => 'trial-runtime-in-seconds',
      'name_format' => '' }

    );

my @trial_stats_device_metrics = (
    { 'key' => 'rx',
      'field' => 'rx_latency_maximum',
      'class' => 'count',
      'type' => 'maximum-rx-packet-roundtrip-latency-in-microseconds',
      'name_format' => '_%port_pair%_%rx_port%' },

    { 'key' => 'rx',
      'field' => 'rx_latency_average',
      'class' => 'count',
      'type' => 'average-rx-packet-roundtrip-latency-in-microseconds',
      'name_format' => '_%port_pair%_%rx_port%' },

    { 'key' => 'tx',
      'field' => 'tx_l2_bps',
      'class' => 'throughput',
      'type' => 'average-l2-tx-throughput-in-bps',
      'name_format' => '_%port_pair%_%tx_port%' },
    
    { 'key' => 'tx',
      'field' => 'tx_l1_bps',
      'class' => 'throughput',
      'type' => 'average-l1-tx-throughput-in-bps',
      'name_format' => '_%port_pair%_%tx_port%' },

    { 'key' => 'rx',
      'field' => 'rx_l2_bps',
      'class' => 'throughput',
      'type' => 'average-l2-rx-throughput-in-bps',
      'name_format' => '_%port_pair%_%rx_port%' },
    
    { 'key' => 'rx',
      'field' => 'rx_l1_bps',
      'class' => 'throughput',
      'type' => 'average-l1-rx-throughput-in-bps',
      'name_format' => '_%port_pair%_%rx_port%' },

    { 'key' => 'rx',
      'field' => 'rx_pps',
      'class' => 'throughput',
      'type' => 'average-rx-packet-throughput-in-pps',
      'name_format' => '_%port_pair%_%rx_port%' },

    { 'key' => 'tx',
      'field' => 'tx_pps',
      'class' => 'throughput',
      'type' => 'average-tx-packet-throughput-in-pps',
      'name_format' => '_%port_pair%_%tx_port%' },

    { 'key' => 'rx',
      'field' => 'rx_lost_pps',
      'class' => 'throughput',
      'type' => 'average-lost-rx-packet-throughput-in-pps',
      'name_format' => '_%port_pair%_%rx_port%' },

    );

my @trial_profiler_metrics = (
    { 'key' => '',
      'subkey' => '',
      'field' => '',
      'class' => '',
      'type' => '',
      'name_format' => '',
      'extra_field' => '',
      'cumulative' => 0 },

    { 'key' => 'global',
      'subkey' => 'rx',
      'field' => 'pps',
      'class' => 'throughput',
      'type' => 'average-rx-packet-throughput-in-pps',
      'name_format' => '',
      'extra_field' => '',
      'cumulative' => 0 },

    { 'key' => 'global',
      'subkey' => 'tx',
      'field' => 'pps',
      'class' => 'throughput',
      'type' => 'average-tx-packet-throughput-in-pps',
      'name_format' => '',
      'extra_field' => '',
      'cumulative' => 0 },

    { 'key' => 'global',
      'subkey' => 'rx',
      'field' => 'bps',
      'class' => 'througput',
      'type' => 'average-rx-throughput-in-bps',
      'name_format' => '',
      'extra_field' => '',
      'cumulative' => 0 },

    { 'key' => 'global',
      'subkey' => 'tx',
      'field' => 'bps',
      'class' => 'throughput',
      'type' => 'average-tx-throughput-in-bps',
      'name_format' => '',
      'extra_field' => '',
      'cumulative' => 0 },

    { 'key' => 'global',
      'subkey' => 'rx',
      'field' => 'drop_bps',
      'class' => 'throughput',
      'type' => 'average-dropped-rx-throughput-in-bps',
      'name_format' => '',
      'extra_field' => '',
      'cumulative' => 0 },

    { 'key' => 'global',
      'subkey' => 'misc',
      'field' => 'cpu_util',
      'class' => 'count',
      'type' => 'average-cpu-utilization-percentage-for-tx-cores',
      'name_format' => '',
      'extra_field' => '',
      'cumulative' => 0 },

    { 'key' => 'global',
      'subkey' => 'rx',
      'field' => 'cpu_util',
      'class' => 'count',
      'type' => 'average-cpu-utilization-percentage-for-rx-core',
      'name_format' => '',
      'extra_field' => '',
      'cumulative' => 0 },

    { 'key' => 'global',
      'subkey' => 'misc',
      'field' => 'bw_per_core',
      'class' => 'throughput',
      'type' => 'average-per-core-bandwidth-in-gbs',
      'name_format' => '',
      'extra_field' => '',
      'cumulative' => 0 },

    { 'key' => 'global',
      'subkey' => 'misc',
      'field' => 'queue_full',
      'class' => 'count',
      'type' => 'number-of-queue-full-events',
      'name_format' => '',
      'extra_field' => '',
      'cumulative' => 1 },

    { 'key' => 'ports',
      'subkey' => 'rx',
      'field' => 'pps',
      'class' => 'throughput',
      'type' => 'average-rx-packet-throughput-in-pps',
      'name_format' => '_%rx_port%',
      'extra_field' => 'rx_port',
      'cumulative' => 0 },

    { 'key' => 'ports',
      'subkey' => 'tx',
      'field' => 'pps',
      'class' => 'throughput',
      'type' => 'average-tx-packet-throughput-in-pps',
      'name_format' => '_%tx_port%',
      'extra_field' => 'tx_port',
      'cumulative' => 0 },

    { 'key' => 'ports',
      'subkey' => 'rx',
      'field' => 'bps_l1',
      'class' => 'throughput',
      'type' => 'average-rx-l1-bandwidth-in-bps',
      'name_format' => '_%rx_port%',
      'extra_field' => 'rx_port',
      'cumulative' => 0 },

    { 'key' => 'ports',
      'subkey' => 'tx',
      'field' => 'bps_l1',
      'class' => 'throughput',
      'type' => 'average-tx-l1-bandwidth-in-bps',
      'name_format' => '_%tx_port%',
      'extra_field' => 'tx_port',
      'cumulative' => 0 },

    { 'key' => 'ports',
      'subkey' => 'rx',
      'field' => 'bps',
      'class' => 'throughput',
      'type' => 'average-rx-l2-throughput-in-bps',
      'name_format' => '_%rx_port%',
      'extra_field' => 'rx_port',
      'cumulative' => 0 },

    { 'key' => 'ports',
      'subkey' => 'tx',
      'field' => 'bps',
      'class' => 'throughput',
      'type' => 'average-tx-l2-throughput-in-bps',
      'name_format' => '_%tx_port%',
      'extra_field' => 'tx_port',
      'cumulative' => 0 },

    { 'key' => 'ports',
      'subkey' => 'rx',
      'field' => 'util',
      'class' => 'count',
      'type' => 'average-rx-port-utilization-percentage',
      'name_format' => '_%rx_port%',
      'extra_field' => 'rx_port',
      'cumulative' => 0 },

    { 'key' => 'ports',
      'subkey' => 'tx',
      'field' => 'util',
      'class' => 'count',
      'type' => 'average-tx-port-utilization-percentage',
      'name_format' => '_%tx_port%',
      'extra_field' => 'tx_port',
      'cumulative' => 0 },

    { 'key' => 'pgids',
      'subkey' => 'latency',
      'field' => 'average',
      'class' => 'count',
      'type' => 'average-round-trip-packet-latency-in-microseconds',
      'name_format' => '_%stream_id%',
      'extra_field' => 'stream_id',
      'cumulative' => 0 },

    { 'key' => 'pgids',
      'subkey' => 'latency',
      'field' => 'total_max',
      'class' => 'count',
      'type' => 'maximum-round-trip-packet-latency-in-microseconds',
      'name_format' => '_%stream_id%',
      'extra_field' => 'stream_id',
      'cumulative' => 0 },

    { 'key' => 'pgids',
      'subkey' => 'latency',
      'field' => 'total_min',
      'class' => 'count',
      'type' => 'minimum-round-trip-packet-latency-in-microsends',
      'name_format' => '_%stream_id%',
      'extra_field' => 'stream_id',
      'cumulative' => 0 },

    { 'key' => 'pgids',
      'subkey' => 'latency',
      'field' => 'duplicate',
      'class' => 'count',
      'type' => 'number-of-duplicate-latency-packets-detected',
      'name_format' => '_%stream_id%',
      'extra_field' => 'stream_id',
      'cumulative' => 0 },

    { 'key' => 'pgids',
      'subkey' => 'latency',
      'field' => 'dropped',
      'class' => 'count',
      'type' => 'number-of-dropped-latency-packets-detected',
      'name_format' => '_%stream_id%',
      'extra_field' => 'stream_id',
      'cumulative' => 0 },

    { 'key' => 'pgids',
      'subkey' => 'latency',
      'field' => 'out_of_order',
      'class' => 'count',
      'type' => 'number-of-latency-packets-received-in-the-wrong-order-detected',
      'name_format' => '_%stream_id%',
      'extra_field' => 'stream_id',
      'cumulative' => 0 },

    { 'key' => 'pgids',
      'subkey' => 'latency',
      'field' => 'seq_too_high',
      'class' => 'count',
      'type' => 'number-of-latency-packets-received-before-they-were-expected-detected',
      'name_format' => '_%stream_id%',
      'extra_field' => 'stream_id',
      'cumulative' => 0 },

    { 'key' => 'pgids',
      'subkey' => 'latency',
      'field' => 'seq_too_low',
      'class' => 'count',
      'type' => 'number-of-latency-packets-received-after-they-were-expected-detected',
      'name_format' => '_%stream_id%',
      'extra_field' => 'stream_id',
      'cumulative' => 0 },

    { 'key' => 'pgids',
      'subkey' => 'tx_pps',
      'field' => 'stream_id',
      'class' => 'throughput',
      'type' => 'average-tx-packet-throughput-in-pps',
      'name_format' => '_%tx_port%_%stream_id%',
      'extra_field' => 'tx_port',
      'cumulative' => 0 },

    { 'key' => 'pgids',
      'subkey' => 'rx_pps',
      'field' => 'stream_id',
      'class' => 'throughput',
      'type' => 'average-rx-packet-throughput-in-pps',
      'name_format' => '_%rx_port%_%stream_id%',
      'extra_field' => 'rx_port',
      'cumulative' => 0 },

    );

# retrieve CDM sample information
my $json_ref = get_json_file("sample.json");
my %bench_iter_sample = %$json_ref;
my $sample_id = $bench_iter_sample{'sample'}{'id'};
my $run_id = $bench_iter_sample{'run'}{'id'};
$bench_iter_sample{'iteration'}{'primary_metric'} = "pps";
$bench_iter_sample{'iteration'}{'primary_period'} = "measurement";
put_json_file(\%bench_iter_sample, $base_bench_dir . "/es/bench/sample-" . $bench_iter_sample{'sample'}{'id'} . ".json");

opendir(my $clients_dh, "clients") || die "$script_name: could not open directory clients: $!\n";
my @client_hostname_dirs = grep(!/^\./, (sort readdir($clients_dh)));
closedir $clients_dh;
for my $client_hostname (@client_hostname_dirs) {
	mkdir("../../es/metrics");
	mkdir("../../es/metrics/" . $client_hostname);

	my $bs_json_ref = get_json_file("clients/" . $client_hostname . "/binary-search.json");

	#print Dumper $bs_json_ref;

	my $prev_period_id;
	for (my $index=0; $index<scalar(@{ $$bs_json_ref{'trials'} }); $index++) {
	    my %trial = %{ $$bs_json_ref{'trials'}[$index] };

	    # convert timestamps from seconds to milliseconds
	    $trial{'stats'}{'trial_start'} *= 1000;
	    $trial{'stats'}{'trial_stop'} *= 1000;

	    printf "TRIAL COUNTER: %d\n", $trial{'trial'};
	    print Dumper \%trial;

	    my $period_name = "trial-" . $trial{'trial'};
	    if ($index == (scalar(@{ $$bs_json_ref{'trials'} }) - 1)) {
		$period_name = "measurement";
	    }

	    my %bench_iter_sample_period = create_bench_iter_sample_period_doc(\%bench_iter_sample, $period_name, $prev_period_id);
	    $prev_period_id = $bench_iter_sample_period{'period'}{'id'};

	    for my $trial_metric ( @trial_metrics ) {
		my %metric_sample = create_metric_sample_doc(\%bench_iter_sample_period,
							     $$trial_metric{'class'},
							     $$trial_metric{'type'},
							     $client_hostname,
							     "trafficgen",
							     "%source%_%hostname%_%type%" . $$trial_metric{'name_format'},
							     $trial{$$trial_metric{'key'}},
							     $trial{'stats'}{'trial_stop'});
		$metric_sample{'metric'}{'begin'} = $trial{'stats'}{'trial_start'};

		put_json_file(\%metric_sample, "../../es/metrics/" . $client_hostname . "/metric-" .
			      $metric_sample{'metric'}{'id'} . ".json");
	    }

	    for my $trial_stats_metric ( @trial_stats_metrics ) {
		my %metric_sample = create_metric_sample_doc(\%bench_iter_sample_period,
							     $$trial_stats_metric{'class'},
							     $$trial_stats_metric{'type'},
							     $client_hostname,
							     "trafficgen",
							     "%source%_%hostname%_%type%" . $$trial_stats_metric{'name_format'},
							     $trial{'stats'}{$$trial_stats_metric{'key'}}{$$trial_stats_metric{'field'}},
							     $trial{'stats'}{'trial_stop'});
		$metric_sample{'metric'}{'begin'} = $trial{'stats'}{'trial_start'};

		put_json_file(\%metric_sample, "../../es/metrics/" . $client_hostname . "/metric-" .
			      $metric_sample{'metric'}{'id'} . ".json");
	    }

	    foreach my $dev_pair ( @{ $trial{'trial_params'}{'test_dev_pairs'} } ) {
		for my $trial_stats_device_metric ( @trial_stats_device_metrics ) {
		    my %metric_sample = create_metric_sample_doc(\%bench_iter_sample_period,
								 $$trial_stats_device_metric{'class'},
								 $$trial_stats_device_metric{'type'},
								 $client_hostname,
								 "trafficgen",
								 "%source%_%hostname%_%type%" . $$trial_stats_device_metric{'name_format'},
								 $trial{'stats'}{$$dev_pair{$$trial_stats_device_metric{'key'}}}{$$trial_stats_device_metric{'field'}},
								 $trial{'stats'}{'trial_stop'});
		    $metric_sample{'metric'}{'begin'} = $trial{'stats'}{'trial_start'};

		    $metric_sample{'metric'}{'tx_port'} = $$dev_pair{'tx'};
		    $metric_sample{'metric'}{'rx_port'} = $$dev_pair{'rx'};
		    $metric_sample{'metric'}{'port_pair'} = $$dev_pair{'dev_pair'};

		    put_json_file(\%metric_sample, "../../es/metrics/" . $client_hostname . "/metric-" .
				  $metric_sample{'metric'}{'id'} . ".json");
		}
	    }

	    if (exists($trial{'profiler-data'}) && defined($trial{'profiler-data'})) {
		my %trex_ports;
		my %trex_pgids;

		foreach my $timestamp (sort (keys %{ $trial{'profiler-data'} } ) ) {
		    foreach my $port (keys %{ $trial{'profiler-data'}{$timestamp}{'ports'}} ) {
			$trex_ports{$port} = 1;
		    }

		    foreach my $pgid (keys %{ $trial{'profiler-data'}{$timestamp}{'ports'}} ) {
			$trex_pgids{$pgid} = 1;
		    }
		}

		my $last_timestamp;
		foreach my $timestamp (sort (keys %{ $trial{'profiler-data'} } ) ) {
		    $timestamp *= 1000;

		    if (! defined($last_timestamp)) {
			$last_timestamp = $timestamp;
		    }

		    my %metric_sample = create_metric_sample_doc(\%bench_iter_sample_period,
								 'count',
								 'profiler-sample-collection-time-in-milliseconds',
								 $client_hostname,
								 'trafficgen',
								 '%source%_%hostname%_%type%',
								 $timestamp);
		    $metric_sample{'metric'}{'begin'} = $last_timestamp;
		    put_json_file(\%metric_sample, "../../es/metrics/" . $client_hostname . "/metric-" .
				  $metric_sample{'metric'}{'id'} . ".json");

		    for my $trial_profiler_metric ( @trial_profiler_metrics ) {
			if ($$trial_profiler_metric{'key'} eq 'global') {
			    my $value = $trial{'profiler-data'}{$timestamp}{$$trial_profiler_metric{'key'}}{$$trial_profiler_metric{'subkey'}}{$$trial_profiler_metric{'field'}};
			    if ($$trial_profiler_metric{'cumulative'} && ($timestamp != $last_timestamp)) {
				if (defined($trial{'profiler-data'}{$last_timestamp}{$$trial_profiler_metric{'key'}}{$$trial_profiler_metric{'subkey'}}{$$trial_profiler_metric{'field'}})) {
				    $value -= $trial{'profiler-data'}{$last_timestamp}{$$trial_profiler_metric{'key'}}{$$trial_profiler_metric{'subkey'}}{$$trial_profiler_metric{'field'}};
				}
			    }

			    my %metric_sample = create_metric_sample_doc(\%bench_iter_sample_period,
									 $$trial_profiler_metric{'class'},
									 $$trial_profiler_metric{'type'},
									 $client_hostname,
									 'trafficgen',
									 '%source%_%hostname%_%type%' . $$trial_profiler_metric{'name_format'},
									 $value,
									 $timestamp);
			    $metric_sample{'metric'}{'begin'} = $last_timestamp;
			    put_json_file(\%metric_sample, "../../es/metrics/" . $client_hostname . "/metric-" .
					  $metric_sample{'metric'}{'id'} . ".json");
			} elsif ($$trial_profiler_metric{'key'} eq 'ports') {
			    foreach my $port (sort (keys %trex_ports)) {
				my $value = $trial{'profiler-data'}{$timestamp}{$$trial_profiler_metric{'key'}}{$port}{$$trial_profiler_metric{'subkey'}}{$$trial_profiler_metric{'field'}};
				if ($$trial_profiler_metric{'cumulative'} && ($timestamp != $last_timestamp)) {
				    if (defined($trial{'profiler-data'}{$last_timestamp}{$$trial_profiler_metric{'key'}}{$port}{$$trial_profiler_metric{'subkey'}}{$$trial_profiler_metric{'field'}})) {
					$value -= $trial{'profiler-data'}{$last_timestamp}{$$trial_profiler_metric{'key'}}{$port}{$$trial_profiler_metric{'subkey'}}{$$trial_profiler_metric{'field'}};
				    }
				}

				my %metric_sample = create_metric_sample_doc(\%bench_iter_sample_period,
									     $$trial_profiler_metric{'class'},
									     $$trial_profiler_metric{'type'},
									     $client_hostname,
									     'trafficgen',
									     '%source%_%hostname%_%type%' . $$trial_profiler_metric{'name_format'},
									     $value,
									     $timestamp);
				$metric_sample{'metric'}{'begin'} = $last_timestamp;
				$metric_sample{'metric'}{$$trial_profiler_metric{'extra_field'}} = $port;
				put_json_file(\%metric_sample, "../../es/metrics/" . $client_hostname . "/metric-" .
					      $metric_sample{'metric'}{'id'} . ".json");
			    }
			} elsif ($$trial_profiler_metric{'key'} eq 'pgids') {
			    foreach my $pgid (sort (keys %trex_pgids)) {
				if ($$trial_profiler_metric{'subkey'} eq 'latency') {
				    my $value = 0;
				    if (exists($trial{'profiler-data'}{$timestamp}{$$trial_profiler_metric{'key'}}{$pgid}{$$trial_profiler_metric{'subkey'}}{$$trial_profiler_metric{'field'}})) {
					$value = $trial{'profiler-data'}{$timestamp}{$$trial_profiler_metric{'key'}}{$pgid}{$$trial_profiler_metric{'subkey'}}{$$trial_profiler_metric{'field'}};
				    }
				    if ($$trial_profiler_metric{'cumulative'} && ($timestamp != $last_timestamp)) {
					$value -= $trial{'profiler-data'}{$last_timestamp}{$$trial_profiler_metric{'key'}}{$pgid}{$$trial_profiler_metric{'subkey'}}{$$trial_profiler_metric{'field'}};
				    }

				    my %metric_sample = create_metric_sample_doc(\%bench_iter_sample_period,
										 $$trial_profiler_metric{'class'},
										 $$trial_profiler_metric{'type'},
										 $client_hostname,
										 'trafficgen',
										 '%source%_%hostname%_%type%' . $$trial_profiler_metric{'name_format'},
										 $value,
										 $timestamp);
				    $metric_sample{'metric'}{'begin'} = $last_timestamp;
				    $metric_sample{'metric'}{$$trial_profiler_metric{'extra_field'}} = $pgid;
				    put_json_file(\%metric_sample, "../../es/metrics/" . $client_hostname . "/metric-" .
						  $metric_sample{'metric'}{'id'} . ".json");
				} else {
				    foreach my $port (sort (keys %trex_ports)) {
					my $value = 0;
					if (exists($trial{'profiler-data'}{$timestamp}{$$trial_profiler_metric{'key'}}{$pgid}{$$trial_profiler_metric{'subkey'}}{$port})) {
					    $value = $trial{'profiler-data'}{$timestamp}{$$trial_profiler_metric{'key'}}{$pgid}{$$trial_profiler_metric{'subkey'}}{$port};
					}
					if ($$trial_profiler_metric{'cumulative'} && ($timestamp != $last_timestamp)) {
					    $value -= $trial{'profiler-data'}{$last_timestamp}{$$trial_profiler_metric{'key'}}{$pgid}{$$trial_profiler_metric{'subkey'}}{$port};
					}

					my %metric_sample = create_metric_sample_doc(\%bench_iter_sample_period,
										     $$trial_profiler_metric{'class'},
										     $$trial_profiler_metric{'type'},
										     $client_hostname,
										     'trafficgen',
										     '%source%_%hostname%_%type%' . $$trial_profiler_metric{'name_format'},
										     $value,
										     $timestamp);
					$metric_sample{'metric'}{'begin'} = $last_timestamp;
					$metric_sample{'metric'}{$$trial_profiler_metric{'field'}} = $pgid;
					$metric_sample{'metric'}{$$trial_profiler_metric{'extra_field'}} = $port;
					put_json_file(\%metric_sample, "../../es/metrics/" . $client_hostname . "/metric-" .
						      $metric_sample{'metric'}{'id'} . ".json");
				    }
				}
			    }
			}
		    }
		}
	    }

	    $bench_iter_sample_period{'period'}{'begin'} = $trial{'stats'}{'trial_start'};
	    $bench_iter_sample_period{'period'}{'end'} = $trial{'stats'}{'trial_stop'};
	    my $period_file = $base_bench_dir . "/es/bench/period-" . $bench_iter_sample_period{'period'}{'id'} . ".json";
	    put_json_file(\%bench_iter_sample_period, $period_file);
	}
}
